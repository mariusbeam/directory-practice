import type { Root, RootContent, Element, ElementContent, Text } from 'hast';
import { Context } from './types';
export declare function h(tagName: string, properties: Record<string, any>, children: ElementContent[]): Element;
export declare function h(tagName: string, children: ElementContent[]): Element;
export declare function h(root: null, children: RootContent[]): Root;
export declare function h(text: 'text', value: string): Text;
export declare function h(raw: 'raw', value: string): Text;
export declare const notionPrefixFactory: (context: Context) => (str: string) => string;
export declare const getNotionFileUrlAndAttr: (context: Context, data: {
    [type: string]: string;
    type: string;
}) => {
    url: string;
    attr: {
        [x: string]: string;
    };
};
export declare const hasChildren: (data: any) => boolean;
export declare const addBlockIdToHast: (context: Context, block: any, hast: Element | Text) => void;
export declare const getColorClassName: (color: string) => string;
export declare const objAssign: <T extends {}, U>(props: T | undefined, newProps: U) => T & U;
export declare const addClassToHast: (hast: Element, classItem: string) => void;
export declare const groupBlocks: (blocks: any[] | undefined) => any[];
export declare const getFootnoteRefId: (index: number) => string;
export declare const getFootnoteContentId: (index: number) => string;
