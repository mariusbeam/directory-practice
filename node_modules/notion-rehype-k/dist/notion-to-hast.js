import { handleFootnotes, addTasksToAddHastChildren } from './handlers/index.js';
import { h } from './utils.js';
export const notionToHast = (blocks, options) => {
    const tasks = [];
    const footnotes = [];
    const { footnoteReference } = options;
    if (footnoteReference) {
        // shallow clone `footnoteReference`, to avoid problems when manipulating `footnoteReference` in place.
        const newReference = {};
        for (let key in footnoteReference) {
            newReference[key] = [...footnoteReference[key]];
        }
        options.footnoteReference = newReference;
    }
    const context = {
        options,
        // @ts-ignore TS doesn't understand such an overload.
        addTasks: (taskOrArray, iterItem) => {
            if (typeof taskOrArray === 'function') {
                tasks.push(taskOrArray);
                return;
            }
            if (!taskOrArray) {
                return;
            }
            for (let i = taskOrArray.length - 1; i > -1; i -= 1) {
                tasks.push(iterItem(taskOrArray[i], i));
            }
        },
        addFootnote: (footnote) => {
            return footnotes.push(footnote);
        },
    };
    const root = h(null, []);
    addTasksToAddHastChildren(context, root, blocks);
    while (tasks.length) {
        const curTask = tasks.pop();
        curTask(context);
    }
    if (footnotes.length > 0) {
        const footnoteHast = handleFootnotes(context, footnotes);
        root.children.push(footnoteHast);
    }
    return root;
};
