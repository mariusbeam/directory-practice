{"version":3,"sources":["../src/sheet-loader.ts"],"sourcesContent":["// ┌───────────────────────────────────────────────────────────────┐\n// │ Contents of sheet-loader.ts                                   │\n// ├───────────────────────────────────────────────────────────────┘\n// │\n// ├── Imports\n// ├──┐Functions\n// │  ├── General\n// │  ├── Schema\n// │  ├── Loader\n// │  └── Main\n// │\n// └───────────────────────────────────────────────────────────────\n\n// ################################################################ Imports\n\nimport { AstroError } from \"astro/errors\";\nimport type { Loader, LoaderContext } from \"astro/loaders\";\nimport { type ZodRawShape, type ZodTypeAny, z } from \"astro/zod\";\nimport type {\n\tCell,\n\tJSONData,\n\tProcessContentOptions,\n\tProcessHeaderOptions,\n\tSheetLoaderOptions,\n\tsheetSchemaToZodSchemaOptions,\n} from \"./types.js\";\n\n// ################################################################ Functions\n\n// ################################ General\n\n/**\n * Fetches JSON data from a Google Sheets document\n */\nexport async function sheetToJSON({ url }: { url: string }): Promise<JSONData> {\n\tconst response = await fetchJSON(url);\n\tconst text = await response.text();\n\treturn parseJSON(text, url);\n}\n\n/**\n * Fetches the response from Google Sheets\n */\nasync function fetchJSON(url: string): Promise<Response> {\n\treturn fetch(url).catch((error: Error) => {\n\t\tthrow new AstroError(`Error fetching ${url}: ${error}`);\n\t});\n}\n\n/**\n * Parses the JSON response from Google Sheets\n */\nasync function parseJSON(text: string, url?: string): Promise<JSONData> {\n\t//const document = url?.split(\"/\")[5];\n\tif (text.startsWith(\"<!DOCTYPE html>\")) {\n\t\tthrow new AstroError(\n\t\t\t`Error fetching JSON data for '${url}', check the ID and share settings of the document.`,\n\t\t);\n\t}\n\tlet jsonObject: JSONData;\n\tconst jsonString = text.slice(47, -2);\n\ttry {\n\t\tjsonObject = JSON.parse(jsonString);\n\t} catch (error) {\n\t\tthrow new AstroError(`Error parsing JSON data for '${url}': ${error}`);\n\t}\n\tif (jsonObject.status === \"error\") {\n\t\tthrow new AstroError(\n\t\t\t`Error in JSON data for '${url}': ${jsonObject.errors?.[0]?.detailed_message ?? \"Unknown error\"}`,\n\t\t);\n\t}\n\treturn jsonObject;\n}\n\n/**\n * Transform headers to camelCase.\n */\nexport const camelCase = (text: string | number): string => {\n\treturn `${text}`\n\t\t.toLowerCase()\n\t\t.replace(/[-_]+/g, \" \") // Replaces any - or _ characters with a space\n\t\t.replace(/[^\\w\\s]/g, \"\") // Removes any non alphanumeric characters\n\t\t.replace(/ (.)/g, ($1) => $1.toUpperCase()) // Uppercases the first character in each group immediately following a space\n\t\t.replace(/ /g, \"\"); // Removes spaces\n};\n\n/**\n * Transform headers to snake_case.\n */\nexport const snake_case = (text: string | number): string => {\n\treturn (\n\t\t`${text}`.charAt(0).toLowerCase() +\n\t\t`${text}`\n\t\t\t.slice(1) // Lowercase the first character\n\t\t\t.replace(/\\W+/g, \" \") // Remove all excess white space and replace & , . etc.\n\t\t\t.replace(/([a-z])([A-Z])([a-z])/g, \"$1 $2$3\") // Put a space at the position of a camelCase -> camel Case\n\t\t\t.split(/\\B(?=[A-Z]{2,})/) // Now split the multi-uppercases customerID -> customer,ID\n\t\t\t.join(\" \") // And join back with spaces.\n\t\t\t.split(\" \") // Split all the spaces again, this time we're fully converted\n\t\t\t.join(\"_\") // And finally snake_case things up\n\t\t\t.toLowerCase()\n\t); // With a nice lower case\n};\n\n// ################################ Schema\n\n/**\n * Associates a Sheet type to the equivalent Zod type.\n */\nconst SHEET_ZOD_TYPE_MAP = new Map<string, ZodTypeAny>([\n\t[\"boolean\", z.boolean()],\n\t[\"number\", z.number()],\n\t[\"string\", z.string()],\n\t// google is not returning ISO 8601 UTC dates, so we avoid validating them\n\t[\"date\", z.string()],\n\t[\"datetime\", z.string()],\n]);\n\n/**\n * Converts the Sheet schema to a Zod schema.\n */\nexport async function sheetSchemaToZodSchema({\n\tcols,\n\ttransformHeader = false,\n\tallowBlanks = false,\n}: sheetSchemaToZodSchemaOptions): Promise<z.ZodObject<ZodRawShape>> {\n\tconst schemaObject: Record<string, z.ZodTypeAny> = {};\n\n\tfor (const column of cols) {\n\t\tconst zodType = SHEET_ZOD_TYPE_MAP.get(column.type) ?? z.string();\n\t\tconst columnName = transformHeader\n\t\t\t? transformHeader(column.label)\n\t\t\t: `${column.label}`;\n\t\tschemaObject[columnName] = allowBlanks\n\t\t\t? zodType.nullable().optional()\n\t\t\t: zodType;\n\t\t// debug\n\t\t//console.log(`${columnName}: ${column.type}`);\n\t}\n\tconst zodSchema = z.object(schemaObject);\n\treturn zodSchema;\n}\n\n// ################################ Loader\n\n/**\n * Process header from json data\n */\nfunction processHeader({\n\tcols,\n\ttransformHeader,\n\tcollection,\n\tlogger,\n}: ProcessHeaderOptions): string[] {\n\t// get header row to set column names\n\tconst columns: string[] = [];\n\tfor (const column of cols) {\n\t\tconst columnName = transformHeader\n\t\t\t? transformHeader(column.label)\n\t\t\t: `${column.label}`;\n\t\tcolumns.push(columnName);\n\t}\n\n\tif (columns.every((column) => column.trim() === \"\")) {\n\t\tlogger.error(\n\t\t\t`${collection}: Blank column names: | ${columns.join(\" | \")} |`,\n\t\t);\n\t\tthrow new AstroError(\"Error retrieving column names.\");\n\t}\n\n\treturn columns;\n}\n\n/**\n * Process rows from json data\n */\nasync function processContent({\n\trows,\n\tcolumns,\n\tcollection,\n\tlogger,\n\tstore,\n\tgenerateDigest,\n\tparseData,\n}: ProcessContentOptions): Promise<void> {\n\t// parse content rows\n\tif (rows.length === 0) {\n\t\tlogger.warn(`${collection}: No entry was loaded.`);\n\t} else {\n\t\tlet rowID = 0;\n\t\tfor (const row of rows) {\n\t\t\tlogger.debug(`${collection}: Processing row ${rowID}`);\n\t\t\tconst id = `row_${rowID}`;\n\t\t\tconst rowData: Record<string, unknown> = {};\n\t\t\trow.c.forEach((c, index) => {\n\t\t\t\tconst columnName = columns[index];\n\t\t\t\tif (!columnName) return;\n\t\t\t\trowData[columnName] = valueOrFormat(c);\n\t\t\t});\n\t\t\tconst parsedData = await parseData({ id, data: rowData }).catch(\n\t\t\t\t(error) => {\n\t\t\t\t\tlogger.error(\n\t\t\t\t\t\t`${collection}: Error validating row ${rowID} (${JSON.stringify(row)}): ${error.message}`,\n\t\t\t\t\t);\n\t\t\t\t\tthrow new AstroError(\"Error validating row data.\");\n\t\t\t\t},\n\t\t\t);\n\t\t\tconst digest = generateDigest(parsedData);\n\t\t\tlogger.debug(`        Source data: ${rowData}`);\n\t\t\tlogger.debug(`        Parsed data: ${parsedData}`);\n\t\t\tstore.set({ id, data: parsedData, digest });\n\t\t\trowID++;\n\t\t}\n\t\tlogger.info(\n\t\t\t`${collection}: Loaded ${rows.length} entries with these ${columns.length} fields: | ${columns.join(\" | \")} |`,\n\t\t);\n\t}\n}\n\n/**\n * Returns the value or formatted string of a cell based on its content.\n */\nfunction valueOrFormat(c: Cell | null): string | number | boolean | undefined {\n\t// example ISO date: {v: 45402, f: \"2024-04-20\"}\n\t// example non-ISO date: {v: \"Date(2024,3,20)\", f: \"4/20/2024\"}\n\t// example time: {v: \"Date(1899,11,30,5,54,0)\", f: \"5:54:00 AM\"}\n\tconst regexISODate = /^\\d{4}-\\d{2}-\\d{2}$/;\n\tconst regexFunDate = /^Date\\(.*\\)$/;\n\tif (!c) {\n\t\treturn undefined;\n\t}\n\tif (c.v === null) {\n\t\treturn undefined;\n\t}\n\tif (!c.f) {\n\t\treturn c.v; // strings\n\t}\n\tif (Number.isInteger(c.v) && regexISODate.test(c.f)) {\n\t\treturn c.f; // iso dates\n\t}\n\tif (regexFunDate.test(`${c.v}`)) {\n\t\treturn c.f; // other time formats\n\t}\n\treturn c.v; // numbers, booleans\n}\n\n// ################################ Main\n\n/**\n * Loads data from a Google Sheets document into Astro\n */\nexport function sheetLoader({\n\tdocument,\n\tgid = 0,\n\tsheet = undefined,\n\trange = undefined,\n\tquery = undefined,\n\ttransformHeader = false,\n\tallowBlanks = false,\n}: SheetLoaderOptions): Loader {\n\tconst sheetParam = `&${sheet ? `sheet=${sheet}` : `gid=${gid}`}`;\n\tconst rangeParam = range ? `&range=${range}` : \"\";\n\tconst queryParam = query ? `&tq=${encodeURIComponent(query)}` : \"\";\n\tconst url = `https://docs.google.com/spreadsheets/d/${document}/gviz/tq?tqx=out:json${sheetParam}${rangeParam}${queryParam}`;\n\tlet cachedJson: JSONData | null = null;\n\tlet autoSchema = false;\n\treturn {\n\t\tname: \"sheet-loader\",\n\t\tload: async ({\n\t\t\tlogger,\n\t\t\tparseData,\n\t\t\tgenerateDigest,\n\t\t\tstore,\n\t\t\tcollection,\n\t\t}: LoaderContext) => {\n\t\t\tif (!cachedJson) {\n\t\t\t\tcachedJson = await sheetToJSON({ url });\n\t\t\t}\n\t\t\tconst json = cachedJson;\n\t\t\tlogger.info(\n\t\t\t\t`${collection}: Loading ${url.replace(/tqx=out:json/, \"tqx=out:html\")}`,\n\t\t\t);\n\n\t\t\tconst columns = processHeader({\n\t\t\t\tcols: json.table.cols,\n\t\t\t\ttransformHeader,\n\t\t\t\tcollection,\n\t\t\t\tlogger,\n\t\t\t});\n\t\t\treturn processContent({\n\t\t\t\trows: json.table.rows,\n\t\t\t\tcolumns,\n\t\t\t\tcollection,\n\t\t\t\tlogger,\n\t\t\t\tstore,\n\t\t\t\tgenerateDigest,\n\t\t\t\tparseData,\n\t\t\t});\n\t\t},\n\t\tschema: async () => {\n\t\t\tif (!cachedJson) {\n\t\t\t\tcachedJson = await sheetToJSON({ url });\n\t\t\t}\n\t\t\tconst json: JSONData = cachedJson as JSONData;\n\t\t\tautoSchema = true;\n\t\t\t//console.log(json.table.cols);\n\t\t\treturn sheetSchemaToZodSchema({\n\t\t\t\tcols: json.table.cols,\n\t\t\t\ttransformHeader,\n\t\t\t\tallowBlanks,\n\t\t\t});\n\t\t},\n\t};\n}\n"],"mappings":"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","names":[]}