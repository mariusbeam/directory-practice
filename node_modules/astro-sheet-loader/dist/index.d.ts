import { Loader } from 'astro/loaders';
import { z, ZodRawShape } from 'astro/zod';

// ################################################################ Imports



// ################################################################ Types

// ################################ General

type transformHeaderType = false | ((text: string | number) => string);

// ################################ JSON

interface Cell {
	f?: string;
	v: string | number | null;
}

interface Row {
	c: (Cell | null)[];
}

interface Column {
	id: string;
	label: string;
	type: string;
	pattern?: string;
}

interface TableData {
	cols: Column[];
	rows: Row[];
}

interface ErrorData {
	reason: string;
	message: string;
	detailed_message: string;
}

// table may not be present if status == "error", so we account for it
interface JSONData {
	version: string;
	reqId: string;
	status: string;
	errors?: ErrorData[];
	sig: string;
	table: TableData;
}

// ################################ Schema

interface sheetSchemaToZodSchemaOptions {
	/** List of columns from Sheet API */
	cols: Column[];
	/** Apply a tranformation function to the header row */
	transformHeader?: transformHeaderType;
	/** If columns may have null values */
	allowBlanks?: boolean;
}

// ################################ Main

/**
 * Options for the Sheet loader
 */
interface SheetLoaderOptions {
	/** The document ID */
	document: string;
	/** The sheet ID */
	gid?: number;
	/** The sheet name */
	sheet?: string;
	/** The range of cells to load */
	range?: string;
	/** Query to apply */
	query?: string;
	/** Apply a tranformation function to the header row, like 'camelCase' or 'snake_case' */
	transformHeader?: transformHeaderType;
	/** Don't fail validation if some entries miss some values */
	allowBlanks?: boolean;
}

/**
 * Fetches JSON data from a Google Sheets document
 */
declare function sheetToJSON({ url }: {
    url: string;
}): Promise<JSONData>;
/**
 * Transform headers to camelCase.
 */
declare const camelCase: (text: string | number) => string;
/**
 * Transform headers to snake_case.
 */
declare const snake_case: (text: string | number) => string;
/**
 * Converts the Sheet schema to a Zod schema.
 */
declare function sheetSchemaToZodSchema({ cols, transformHeader, allowBlanks, }: sheetSchemaToZodSchemaOptions): Promise<z.ZodObject<ZodRawShape>>;
/**
 * Loads data from a Google Sheets document into Astro
 */
declare function sheetLoader({ document, gid, sheet, range, query, transformHeader, allowBlanks, }: SheetLoaderOptions): Loader;

export { camelCase, sheetLoader, sheetSchemaToZodSchema, sheetToJSON, snake_case };
